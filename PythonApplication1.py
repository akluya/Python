import numpy as np
import linalg
import math
import matplotlib.pyplot as plt

R = 8.14 ## перед фронтом
T0 = float(298)
p0 = 1e5
Q = 3.39e6

w1 = 0
w2 = 0
w3 = 0.653
w4 = 0.347

mu1 = 2e-3
mu2 = 32e-3
mu3 = 28e-3
mu4 = 18e-3

etta0 = R*T0/p0 * (w1/mu1 + w2/mu2 + w3/mu3 + w4/mu4)

print(etta0)

c10 = R * ((40783.22810 / T0**2) + (-800.9185450 / T0) + (8.214701670) - (0.01269714360 * T0) + (1.753604930e-5 * T0**2) - (1.202860160e-8 * T0**3) + (3.368093160e-12 * T0**4)) - R
c20 = R * ((-3.425563420e4 / T0**2) + (484.7000970 / T0) + (1.119010961) + (4.293889240e-3 * T0) + (-6.836300520e-7 * T0**2) + (-2.023372700e-9 * T0**3)) - R
c30 = R * ((2.210371497e4 / T0**2) + (-381.8461820 / T0) + (6.082738360) + (-8.530914410e-3 * T0) + (1.384646189e-5 * T0**2) + (-9.625793620e-9 * T0**3) + 2.519705809e-12 * T0**4) - R
c40 = R * ((-3.947960830e4 / T0**2) + (575.5731020 / T0) + (0.9317826530) + (7.222712860e-3 * T0) + (-7.342557370e-6 * T0**2) + (4.955043490e-9 * T0**3)) - R

k0 = 1 + R * (w1/mu1 + w2/mu2 + w3/mu3 + w4/mu4)/(w1 * c10 / mu1 + w2 * c20 / mu2 + w3 * c30 / mu3 + w4 * c40 / mu4)

#print(k0)

k = []

T1 = float(1.89e3) ## начальные приближения
p1 = 4.6500e4
etta1 = 1.5e1

print(T1, p1, etta1)



p = [p1]
etta = [etta1]
T = [T1]


i = 0
f = open('text.txt', 'w')

while (i < 10000):

    x1 = T[i]
    x2 = p[i]
    x3 = etta[i]

    x = [[x1], [x2], [x3]]

    #x = np.array([[x1], [x2], [x3]])

    if (x1 <= 1000):

        c1 = R * ((4.078322810e4 / x1**2) + (-1)*(800.9185450 / x1) + (8.214701670) + (-1)*(1.269714360e-2 * x1) + (1.753604930e-5 * x1**2) + (-1)*(1.202860160e-8 * x1**3) + (3.368093160e-12 * x3**4)) - R
        c2 = R * ((-3.425563420e4 / x1**2) + (484.7000970 / x1) + (1.119010961) + (4.293889240e-3 * x1) + (-6.836300520e-7 * x1**2) + (-2.023372700e-9 * x1**3)) - R
        c3 = R * ((2.210371497e4 / x1**2) + (-381.8461820 / x1) + (6.082738360) + (-8.530914410e-3 * x1) + (1.384646189e-5 * x1**2) + (-9.625793620e-9 * x1**3) + 2.519705809e-12 * x1**4) - R
        c4 = R * ((-3.947960830e4 / x1**2) + (575.5731020 / x1) + (0.9317826530) + (7.222712860e-3 * x1) + (-7.342557370e-6 * x1**2) + (4.955043490e-9 * x1**3)) - R

        dc1 = R * (((-2) * 40783.22810 / x1**3) + ((-1) * (-800.9185450) / x1**2) + (2 * (-0.01269714360)) + (2 * 1.753604930e-5 * x1) + 3 * (-1.202860160e-8 * x1**2) + 4 * (3.368093160e-12 * x1**3))
        dc2 = R * (((-2) * (-3.425563420e4) / x1**3) + (-1)*(484.7000970 / x1**2) + (4.293889240e-3) + 2*(-6.836300520e-7 * x1) + 3*(-2.023372700e-9 * x1**2))
        dc3 = R * ((-2) * (2.210371497e4 / x1**3) + (-1) * (-381.8461820 / x1**2) + ((-1) * 8.530914410e-3) + 2 * (1.384646189e-5 * x1) + 3*((-1)*9.625793620e-9 * x1**2) + 4 * (2.519705809e-12 * x1**3))
        dc4 = R * ((-2)*(-3.947960830e4 / x1**3) + (-1)*(575.5731020 / x1**2) + (7.222712860e-3) + 2*(-7.342557370e-6 * x1) + 3*(4.955043490e-9 * x1**2))

    else:

        c1 = R * ((5.608123380e5/ x1**2) + (-1)*(8.371491340e2/ x1) + (2.975363040) + (11.252249930e-3 * x1) + (-1)*(3.740718420e-7 * x1**2) + (5.936628250e-11 * x1**3) + (-1)*(3.606995730e-15 * x3**4)) - R
        c2 = R * (((-1)*1.037939022e6 / x1**2) + (2.344830282e3 / x1) + (1.819732036) + (1.267847582e-3 * x1) + (-1)*(2.188067988e-7 * x1**2) + (2.053719572e-11 * x1**3)) - R
        c3 = R * ((5.877124060e5 / x1**2) + (-1)*2.239249073e3 / x1 + (6.066949220) + (-1)*6.139685500e-4 * x1 + (1.491806679e-7 * x1**2) + (-1.923105485e-11 * x1**3) + 1.061954386e-15 * x1**4) - R
        c4 = R * ((1.034972096e6 / x1**2) + (-2.412698562e3 / x1) + (4.646110780) + (2.291998307e-3 * x1) + (-6.836830480e-7 * x1**2) + (9.426468930e-11 * x1**3)) - R

        dc1 = R * ((-2) * 5.608123380e5 / x1**3 + (-1) * (-1)*8.371491340e2 / x1**2 + 11.252249930e-3 + 2*(-1)*3.740718420e-7 * x1 + 3 * 5.936628250e-11 * x1**2 + 4 * (-1)*3.606995730e-15 * x1**3)
        dc2 = R * ((2 *1.037939022e6 / x1**3) + (-1)*(2.344830282e3 / x1**2) + (1.267847582e-3) + 2*(-1)*(2.188067988e-7 * x1) + 3*(2.053719572e-11 * x1**2))
        dc3 = R * ((-2) * (5.877124060e5 / x1**3) + (-1)*2.239249073e3  / x1**2 + (-1)*6.139685500e-4 + 2 * (1.491806679e-7  * x1) + 3*((-1)*1.923105485e-11  * x1**2) + 4 * (1.061954386e-15 * x1**3))
        dc4 = R * ((-2)*(1.034972096e6 / x1**3) + (-1)*(2.412698562e3 / x1**2) + (2.291998307e-3) + 2*(-6.836830480e-7 * x1) + 3*(9.426468930e-11 * x1**2))


    k.insert(i , (1 + R * (w1/mu1 + w2/mu2 + w3/mu3 + w4/mu4)/(w1 * c1 / mu1 + w2 * c2 / mu2 + w3 * c3 / mu3 + w4 * c4 / mu4)))
    dk = R * (w1/mu1 + w2/mu2 + w3/mu3 + w4/mu4)/(w1 * c1 / mu1 + w2 * c2 / mu2 + w3 * c3 / mu3 + w4 * c4 / mu4)**2 * (w1 * dc1 / mu1 + w2 * dc2 / mu2 + w3 * dc3 / mu3 + w4 * dc4 / mu4)

    W1 = (w1/mu1 + w2/mu2 + w3/mu3 + w4/mu4) * R / x3
    W2 = -1
    W3 = (-1) * R * (w1/mu1 + w2/mu2 + w3/mu3 + w4/mu4) * x1 / x3**2
    W4 = dk * x2 / x3
    W5 = k[i] * x2 / x3 - 1/(etta0 - x2)
    W6 = (-1)* k[i] * x2/x3**2 - (x2 - p0)/(etta0 - x3)**2
    W7 = x2 * x3 / (k[i] - 1)**2 * dk
    W8 = 1/2 * (etta0 - x3) / x3/(k[i] - 1)
    W9 = (-1)*1/2 * (p0 + x2) - x2/(k[i] - 1)

    W = np.array([[W1, W2, W3],
                  [W4, W5, W6],
                  [W7, W8, W9]])

    ##print("W: " + str(W))

    F1 = (w1/mu1 + w2/mu2 + w3/mu3 + w4/mu4) * R * x1 / x3 - x2
    F2 = k[i] * x2 / x3 - (x2 - p0)/(etta0 - x3)
    F3 = 1/2 * (p0 + x2) * (etta0 - x3) + Q + p0 * etta0 / (k0 - 1) - x2*x3/(k[i] - 1)


    F = np.array([[F1], [F2], [F3]])

    ##print("F: " + str(F))
       
    #y = np.linalg.solve(W, -F)

    #print("Y: " + str(y))

    y = x - np.dot(np.linalg.inv(W), F)
    l = max([abs(a - b) for a, b in zip(x, y)])

    if  (l > 1e-3):
        x = y
        i+=1
        print(l)
    else:
        break
    ##x = y

    print("X: " + str(x))

    f.write(str(i) + '\t' + str(x[0][0]) + '\t' + str(x[1][0]) + '\t' + str(x[2][0]) + '\t' + str(l) + '\n')
    
    T.insert(i+ 1, x[0][0])
    p.insert(i + 1, x[1][0])
    etta.insert(i + 1, x[2][0])

#asd = (p[0][i] - p0)/(etta0 - etta)
#print(asd)
D = etta0*math.sqrt((p[i] - p0)/(etta0 - etta[i]))
nu = (etta0 - etta[i])*math.sqrt((p[i] - p0)/(etta0 - etta[i]))                    

print(i, T[i], p[i], etta[i], k[i])
print(D, nu)

f.write('\n' + str(T[i]) + '\t' + str(p[i]) + '\t' + str(etta[i]) + '\t' + str(D) + '\t' + str(nu) + '\t' + str(k[i]) + '\n')

#fig = plt.figure()
#plt.plot(etta, p)
#plt.title('1a TITLE')
#plt.ylabel('3a Ylabel')
#plt.xlabel('2a Xlabel ')
#plt.grid(True)
#plt.show()

f.close()